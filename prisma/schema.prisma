  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
  }

  model User {
    id         String   @id @default(uuid())
    name       String
    avatar_url String?
    created_at DateTime @default(now())
    email      String?  @unique

    accounts Account[]
    sessions Session[]
    ratings  Rating[]

    @@map("users")
  }

  model Book {
    id          String   @id @default(uuid())
    name        String
    author      String
    summary     String @db.LongText 
    cover_url   String
    total_pages Int
    created_at  DateTime @default(now())

    categories CategoriesOnBooks[]
    ratings    Rating[]

    @@map("books")
  }

  model Category {
    id   String @id @default(uuid())
    name String @unique

    books CategoriesOnBooks[]

    @@map("categories")
  }

  model CategoriesOnBooks {
    book_id    String
    categoryId String

    book     Book     @relation(fields: [book_id], references: [id])
    category Category @relation(fields: [categoryId], references: [id])

    @@id([book_id, categoryId])
      @@index([book_id])
    @@index([categoryId])
}

  model Rating {
    id          String   @id @default(uuid())
    rate        Int
    description String @db.LongText
    created_at  DateTime @default(now())

    book    Book   @relation(fields: [book_id], references: [id])
    book_id String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    @@map("ratings")
      @@index([book_id])
    @@index([user_id])
}

  model Account {
    id                  String  @id @default(cuid())
    user_id             String
    type                String
    provider            String
    provider_account_id String
    refresh_token       String? @db.LongText
    refresh_token_expires_in  Int?  
    access_token        String? @db.LongText
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String? @db.LongText
    session_state       String?
    user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([provider, provider_account_id])
    @@map("accounts")
      @@index([user_id])
}

  model Session {
    id            String   @id @default(cuid())
    session_token String
    user_id       String
    expires       DateTime
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@map("sessions")
      @@index([user_id])
}
